/* Generated by the Nim Compiler v1.5.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI419430404 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI419430403 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555117 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555115 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554455 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555076 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555158 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI33554439 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555157 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI33555105 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555106 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554437 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI419430407 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
NTI419430407.base = NTI33554437;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
var NNI33555106 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555106.node = NNI33555106;
NTI33555157.base = NTI33555105;
NTI33555158.base = NTI33555105;
var NNI33555105 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555157, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554438, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554438, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555158, name: "up", sons: null}]};
NTI33555105.node = NNI33555105;
var NNI33555076 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555076.node = NNI33555076;
NTI33555105.base = NTI33555076;
NTI33555106.base = NTI33555105;
NTI33555121.base = NTI33555106;
var NNI33555917 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554455, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI33555917.node = NNI33555917;
var NNI33555115 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555115.node = NNI33555115;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555113.base = NTI33555106;
NTI33555115.base = NTI33555113;
var NNI33555117 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555117.node = NNI33555117;
NTI33555117.base = NTI33555106;
NTI419430404.base = NTI33554437;
var NNI419430403 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI419430404, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554455, name: "Field1", sons: null}]};
NTI419430403.node = NNI419430403;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(47);
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_33557144, src_33557145, ti_33557146) {
  var result_33557155 = null;

    switch (ti_33557146.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557135(ti_33557146))) {
      result_33557155 = src_33557145;
      }
      else {
        result_33557155 = [src_33557145[0], src_33557145[1]];
      }
      
      break;
    case 19:
            if (dest_33557144 === null || dest_33557144 === undefined) {
        dest_33557144 = {};
      }
      else {
        for (var key in dest_33557144) { delete dest_33557144[key]; }
      }
      for (var key in src_33557145) { dest_33557144[key] = src_33557145[key]; }
      result_33557155 = dest_33557144;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557146.base == null))) {
      result_33557155 = nimCopy(dest_33557144, src_33557145, ti_33557146.base);
      }
      else {
      if ((ti_33557146.kind == 17)) {
      result_33557155 = (dest_33557144 === null || dest_33557144 === undefined) ? {m_type: ti_33557146} : dest_33557144;
      }
      else {
        result_33557155 = (dest_33557144 === null || dest_33557144 === undefined) ? {} : dest_33557144;
      }
      }
      nimCopyAux(result_33557155, src_33557145, ti_33557146.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557145 === null) {
        result_33557155 = null;
      }
      else {
        if (dest_33557144 === null || dest_33557144 === undefined) {
          dest_33557144 = new Array(src_33557145.length);
        }
        else {
          dest_33557144.length = src_33557145.length;
        }
        result_33557155 = dest_33557144;
        for (var i = 0; i < src_33557145.length; ++i) {
          result_33557155[i] = nimCopy(result_33557155[i], src_33557145[i], ti_33557146.base);
        }
      }
    
      break;
    case 28:
            if (src_33557145 !== null) {
        result_33557155 = src_33557145.slice(0);
      }
    
      break;
    default: 
      result_33557155 = src_33557145;
      break;
    }

  return result_33557155;

}
function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_33557183, value_33557184, typ_33557185) {
        var result = new Array(len_33557183);
    for (var i = 0; i < len_33557183; ++i) result[i] = nimCopy(null, value_33557184, typ_33557185);
    return result;
  

  
}
function toJSStr(s_33556808) {
                    var Tmp5;
            var Tmp7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break L2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_33556859 = c_33556846.toString(16);
                  if (((code_33556859).length == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Tmp5 = true; else {                      Tmp5 = (s_33556808[i_33556844] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_33556845 += 1;
        }
    } while(false);
    if (res_33556843.length < j_33556845) { for (var i=res_33556843.length;i<j_33556845;++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}
function raiseException(e_33556669, ename_33556670) {
    e_33556669.name = ename_33556670;
    if ((excHandler == 0)) {
    unhandledException(e_33556669);
    }
    
    e_33556669.trace = nimCopy(null, rawWriteStackTrace_33556633(), NTI33554438);
    throw e_33556669;

  
}
function chckIndx(i_33557188, a_33557189, b_33557190) {
      var Tmp1;

  var result_33557191 = 0;

  BeforeRet: do {
      if (!(a_33557189 <= i_33557188)) Tmp1 = false; else {        Tmp1 = (i_33557188 <= b_33557190);      }    if (Tmp1) {
    result_33557191 = i_33557188;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557188, a_33557189, b_33557190);
    }
    
  } while (false);

  return result_33557191;

}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function addChar(x_33557259, c_33557260) {
    x_33557259.push(c_33557260);

  
}
function addInt(a_33556941, b_33556942) {
        var result = a_33556941 + b_33556942;
    checkOverflowInt(result);
    return result;
  

  
}
function isFatPointer_33557135(ti_33557136) {
  var result_33557137 = false;

  BeforeRet: do {
    result_33557137 = !((ConstSet2[ti_33557136.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557137;

}
function nimCopyAux(dest_33557148, src_33557149, n_33557150) {
    switch (n_33557150.kind) {
    case 0:
      break;
    case 1:
            dest_33557148[n_33557150.offset] = nimCopy(dest_33557148[n_33557150.offset], src_33557149[n_33557150.offset], n_33557150.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557150.sons.length; i++) {
      nimCopyAux(dest_33557148, src_33557149, n_33557150.sons[i]);
    }
    
      break;
    case 3:
            dest_33557148[n_33557150.offset] = nimCopy(dest_33557148[n_33557150.offset], src_33557149[n_33557150.offset], n_33557150.typ);
      for (var i = 0; i < n_33557150.sons.length; ++i) {
        nimCopyAux(dest_33557148, src_33557149, n_33557150.sons[i][1]);
      }
    
      break;
    }

  
}
function add_33556421(x_33556422, x_33556422_Idx, y_33556423) {
          if (x_33556422[x_33556422_Idx] === null) { x_33556422[x_33556422_Idx] = []; }
      var off = x_33556422[x_33556422_Idx].length;
      x_33556422[x_33556422_Idx].length += y_33556423.length;
      for (var i = 0; i < y_33556423.length; ++i) {
        x_33556422[x_33556422_Idx][off+i] = y_33556423.charCodeAt(i);
      }
    

  
}
function auxWriteStackTrace_33556545(f_33556546) {
          var Tmp3;

  var result_33556547 = [[]];

    var it_33556555 = f_33556546;
    var i_33556556 = 0;
    var total_33556557 = 0;
    var tempFrames_33556558 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555917);
    L1: do {
        L2: while (true) {
          if (!!((it_33556555 == null))) Tmp3 = false; else {            Tmp3 = (i_33556556 <= 63);          }        if (!Tmp3) break L2;
          tempFrames_33556558[i_33556556].Field0 = it_33556555.procname;
          tempFrames_33556558[i_33556556].Field1 = it_33556555.line;
          tempFrames_33556558[i_33556556].Field2 = it_33556555.filename;
          i_33556556 += 1;
          total_33556557 += 1;
          it_33556555 = it_33556555.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_33556555 == null))) break L5;
          total_33556557 += 1;
          it_33556555 = it_33556555.prev;
        }
    } while(false);
    result_33556547[0] = nimCopy(null, [], NTI33554438);
    if (!((total_33556557 == i_33556556))) {
    result_33556547[0].push.apply(result_33556547[0], makeNimstrLit("("));;
    result_33556547[0].push.apply(result_33556547[0], cstrToNimstr(((total_33556557 - i_33556556))+""));;
    result_33556547[0].push.apply(result_33556547[0], makeNimstrLit(" calls omitted) ...\x0A"));;
    }
    
    L6: do {
      var j_33556604 = 0;
      var colontmp__419430590 = 0;
      colontmp__419430590 = (i_33556556 - 1);
      var res_419430592 = colontmp__419430590;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_419430592)) break L8;
            j_33556604 = res_419430592;
            result_33556547[0].push.apply(result_33556547[0], cstrToNimstr(tempFrames_33556558[j_33556604].Field2));;
            if ((0 < tempFrames_33556558[j_33556604].Field1)) {
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit("("));;
            result_33556547[0].push.apply(result_33556547[0], cstrToNimstr((tempFrames_33556558[j_33556604].Field1)+""));;
            if (false) {
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit(", "));;
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit("0"));;
            }
            
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit(")"));;
            }
            
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit(" at "));;
            add_33556421(result_33556547, 0, tempFrames_33556558[j_33556604].Field0);
            result_33556547[0].push.apply(result_33556547[0], makeNimstrLit("\x0A"));;
            res_419430592 -= 1;
          }
      } while(false);
    } while(false);

  return result_33556547[0];

}
function rawWriteStackTrace_33556633() {
  var result_33556634 = [];

    if (!((framePtr == null))) {
    result_33556634 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(auxWriteStackTrace_33556545(framePtr) || []), NTI33554438);
    }
    else {
      result_33556634 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI33554438);
    }
    

  return result_33556634;

}
function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_33556829 = new Array(len_33556828); for (var i=0;i<len_33556828;++i) {result_33556829[i]=null;}  framePtr = F.prev;

  return result_33556829;

}
function unhandledException(e_33556665) {
    var buf_33556666 = [[]];
    if (!(((e_33556665.message).length == 0))) {
    buf_33556666[0].push.apply(buf_33556666[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556666[0].push.apply(buf_33556666[0], e_33556665.message);;
    }
    else {
    buf_33556666[0].push.apply(buf_33556666[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556666[0].push.apply(buf_33556666[0], makeNimstrLit(" ["));;
    add_33556421(buf_33556666, 0, e_33556665.name);
    buf_33556666[0].push.apply(buf_33556666[0], makeNimstrLit("]\x0A"));;
    buf_33556666[0].push.apply(buf_33556666[0], rawWriteStackTrace_33556633());;
    var cbuf_33556667 = toJSStr(buf_33556666[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556667);
  }
  else {
    throw cbuf_33556667;
  }
  

  
}
function raiseIndexError(i_33556756, a_33556757, b_33556758) {
    var Tmp1;

    if ((b_33556758 < a_33556757)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_33556756)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_33556757)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_33556758)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI33554438), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "IndexDefect");

  
}
function addEscapedChar_33557887(s_33557888, s_33557888_Idx, c_33557889) {
  var F={procname:"system.addEscapedChar",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system.nim",line:0};
  framePtr = F;
    F.line = 2814;
    switch (c_33557889) {
    case 7:
      F.line = 2815;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\a"));;
      break;
    case 8:
      F.line = 2816;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\b"));;
      break;
    case 9:
      F.line = 2817;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\t"));;
      break;
    case 10:
      F.line = 2818;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\n"));;
      break;
    case 11:
      F.line = 2819;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\v"));;
      break;
    case 12:
      F.line = 2820;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\f"));;
      break;
    case 13:
      F.line = 2821;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\c"));;
      break;
    case 27:
      F.line = 2822;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\e"));;
      break;
    case 92:
      F.line = 2823;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\\\"));;
      break;
    case 39:
      F.line = 2824;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\\'"));;
      break;
    case 34:
      F.line = 2825;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\\""));;
      break;
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      F.line = 2826;
      addChar(s_33557888[s_33557888_Idx], c_33557889);;
      break;
    default: 
      F.line = 2828;
      s_33557888[s_33557888_Idx].push.apply(s_33557888[s_33557888_Idx], makeNimstrLit("\\x"));;
      F.line = 2830;
      var n_33557899 = c_33557889;
      F.line = 2831;
      addChar(s_33557888[s_33557888_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx(((n_33557899 & 240) >> 4), 0, (makeNimstrLit("0123456789ABCDEF")).length-1)]);;
      F.line = 2832;
      addChar(s_33557888[s_33557888_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((n_33557899 & 15), 0, (makeNimstrLit("0123456789ABCDEF")).length-1)]);;
      break;
    }
  framePtr = F.prev;

  
}
function addQuoted_419430516(s_419430518, s_419430518_Idx, x_419430519) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system.nim",line:0};
  framePtr = F;
    F.line = 2869;
    s_419430518[s_419430518_Idx].push.apply(s_419430518[s_419430518_Idx], makeNimstrLit("\'"));;
    F.line = 2870;
    addEscapedChar_33557887(s_419430518, s_419430518_Idx, x_419430519);
    F.line = 2871;
    s_419430518[s_419430518_Idx].push.apply(s_419430518[s_419430518_Idx], makeNimstrLit("\'"));;
  framePtr = F.prev;

  
}
function collectionToString_419430484(x_419430486, prefix_419430487, separator_419430488, suffix_419430489) {
  var result_419430490 = [[]];

  var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system/dollars.nim",line:0};
  framePtr = F;
    F.line = 138;
    result_419430490[0] = nimCopy(null, prefix_419430487, NTI33554438);
    F.line = 139;
    var firstElement_419430491 = true;
    L1: do {
      F.line = 140;
      var value_419430512 = 0;
      F.line = 52;
      var i_419430598 = 0;
      L2: do {
        F.line = 53;
          L3: while (true) {
          if (!(i_419430598 <= 255)) break L3;
            if ((x_419430486[i_419430598] != undefined)) {
            F.line = 140;
            value_419430512 = i_419430598;
            if (firstElement_419430491) {
            F.line = 142;
            firstElement_419430491 = false;
            }
            else {
              F.line = 144;
            result_419430490[0].push.apply(result_419430490[0], separator_419430488);;
            }
            
            F.line = 153;
            addQuoted_419430516(result_419430490, 0, value_419430512);
            }
            
            F.line = 55;
            i_419430598 += 1;
          }
      } while(false);
    } while(false);
    F.line = 154;
    result_419430490[0].push.apply(result_419430490[0], suffix_419430489);;
  framePtr = F.prev;

  return result_419430490[0];

}
function HEX24_419430480(x_419430482) {
  var result_419430483 = [];

  var F={procname:"$.$",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system/dollars.nim",line:0};
  framePtr = F;
    F.line = 157;
    result_419430483 = nimCopy(null, collectionToString_419430484(x_419430482, makeNimstrLit("{"), makeNimstrLit(", "), makeNimstrLit("}")), NTI33554438);
  framePtr = F.prev;

  return result_419430483;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555115, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_33556939) {
        if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
  

  
}
function sysFatal_218103843(message_218103846) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system/fatal.nim",line:0};
  framePtr = F;
    F.line = 53;
    raiseException({message: nimCopy(null, message_218103846, NTI33554438), m_type: NTI33555117, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}
function raiseAssert_218103841(msg_218103842) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system/assertions.nim",line:0};
  framePtr = F;
    F.line = 23;
    sysFatal_218103843(msg_218103842);
  framePtr = F.prev;

  
}
function failedAssertImpl_218103865(msg_218103866) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"/home/test/.choosenim/toolchains/nim-#devel/lib/system/assertions.nim",line:0};
  framePtr = F;
    F.line = 30;
    raiseAssert_218103841(msg_218103866);
  framePtr = F.prev;

  
}
var F={procname:"module arriter",prev:framePtr,filename:"/mnt/workspace/github/hax-nim/jsback/arriter.nim",line:0};
framePtr = F;
F.line = 1;
var scores_419430405 = [[{Field0: nimCopy(null, ConstSet1, NTI419430407), Field1: 10}]];
L1: do {
  F.line = 3;
  var item_419430428 = [null];
  F.line = 199;
  var i_419430580 = 0;
  F.line = 200;
  var L_419430581 = (scores_419430405[0]).length;
  L2: do {
    F.line = 201;
      L3: while (true) {
      if (!(i_419430580 < L_419430581)) break L3;
        F.line = 3;
        item_419430428[0] = scores_419430405[0][chckIndx(i_419430580, 0, (scores_419430405[0]).length-1)];
        F.line = 4;
        rawEcho(HEX24_419430480(item_419430428[0]["Field0"]));
        F.line = 203;
        i_419430580 = addInt(i_419430580, 1);
        if (!(((scores_419430405[0]).length == L_419430581))) {
        F.line = 204;
        failedAssertImpl_218103865(makeNimstrLit("/home/test/.choosenim/toolchains/nim-#devel/lib/system/iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  } while(false);
} while(false);
L4: do {
  F.line = 6;
  var chars_419430525 = [null];
  F.line = 6;
  var value_419430526 = [[null, 0]];
  F.line = 199;
  var i_419430584 = 0;
  F.line = 200;
  var L_419430585 = (scores_419430405[0]).length;
  L5: do {
    F.line = 201;
      L6: while (true) {
      if (!(i_419430584 < L_419430585)) break L6;
        F.line = 6;
        chars_419430525[0] = nimCopy(chars_419430525[0], scores_419430405[0][chckIndx(i_419430584, 0, (scores_419430405[0]).length-1)]["Field0"], NTI419430403);
        F.line = 202;
        value_419430526[0][0] = scores_419430405[0][chckIndx(i_419430584, 0, (scores_419430405[0]).length-1)]; value_419430526[0][1] = "Field1";
        F.line = 7;
        rawEcho(HEX24_419430480(chars_419430525[0]));
        F.line = 203;
        i_419430584 = addInt(i_419430584, 1);
        if (!(((scores_419430405[0]).length == L_419430585))) {
        F.line = 204;
        failedAssertImpl_218103865(makeNimstrLit("/home/test/.choosenim/toolchains/nim-#devel/lib/system/iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  } while(false);
} while(false);
framePtr = F.prev;
var F={procname:"module arriter",prev:framePtr,filename:"/mnt/workspace/github/hax-nim/jsback/arriter.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module arriter",prev:framePtr,filename:"/mnt/workspace/github/hax-nim/jsback/arriter.nim",line:0};
framePtr = F;
framePtr = F.prev;
