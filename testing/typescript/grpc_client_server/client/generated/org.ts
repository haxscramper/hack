/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: org.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org {
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class HandleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
            }
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            handle?: number;
        }): HandleRequest {
            const message = new HandleRequest({});
            if (data.handle != null) {
                message.handle = data.handle;
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: number;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.handle != 0)
                writer.writeInt64(1, this.handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.handle = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleRequest {
            return HandleRequest.deserialize(bytes);
        }
    }
    export class SubnodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: number;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            handle?: number;
            index?: number;
        }): SubnodeRequest {
            const message = new SubnodeRequest({});
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: number;
                index?: number;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.handle != 0)
                writer.writeInt64(1, this.handle);
            if (this.index != 0)
                writer.writeInt32(2, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubnodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubnodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.handle = reader.readInt64();
                        break;
                    case 2:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubnodeRequest {
            return SubnodeRequest.deserialize(bytes);
        }
    }
    export class HandleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
            }
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            handle?: number;
        }): HandleResponse {
            const message = new HandleResponse({});
            if (data.handle != null) {
                message.handle = data.handle;
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: number;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.handle != 0)
                writer.writeInt64(1, this.handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.handle = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HandleResponse {
            return HandleResponse.deserialize(bytes);
        }
    }
    export class KindResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: KindResponse.Kind;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, KindResponse.Kind.NONE) as KindResponse.Kind;
        }
        set kind(value: KindResponse.Kind) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            kind?: KindResponse.Kind;
        }): KindResponse {
            const message = new KindResponse({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: KindResponse.Kind;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind != KindResponse.Kind.NONE)
                writer.writeEnum(1, this.kind);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KindResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KindResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KindResponse {
            return KindResponse.deserialize(bytes);
        }
    }
    export namespace KindResponse {
        export enum Kind {
            NONE = 0,
            TEXT = 1,
            PARAGRAPH = 2,
            SUBTREE = 3
        }
    }
    export class CountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            count?: number;
        }): CountResponse {
            const message = new CountResponse({});
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeInt32(1, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CountResponse {
            return CountResponse.deserialize(bytes);
        }
    }
    export class TextResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            text?: string;
        }): TextResponse {
            const message = new TextResponse({});
            if (data.text != null) {
                message.text = data.text;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TextResponse {
            return TextResponse.deserialize(bytes);
        }
    }
    export class LevelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            level?: number;
        }): LevelResponse {
            const message = new LevelResponse({});
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: number;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != 0)
                writer.writeInt32(1, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LevelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LevelResponse {
            return LevelResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOrgServiceService {
        static definition = {
            GetKind: {
                path: "/org.OrgService/GetKind",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: KindResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => KindResponse.deserialize(new Uint8Array(bytes))
            },
            GetSubnodeCount: {
                path: "/org.OrgService/GetSubnodeCount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CountResponse.deserialize(new Uint8Array(bytes))
            },
            GetSubnode: {
                path: "/org.OrgService/GetSubnode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubnodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubnodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HandleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HandleResponse.deserialize(new Uint8Array(bytes))
            },
            GetText: {
                path: "/org.OrgService/GetText",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TextResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TextResponse.deserialize(new Uint8Array(bytes))
            },
            GetSubtreeLevel: {
                path: "/org.OrgService/GetSubtreeLevel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HandleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HandleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LevelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LevelResponse.deserialize(new Uint8Array(bytes))
            },
            GetRoot: {
                path: "/org.OrgService/GetRoot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HandleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HandleResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetKind(call: grpc_1.ServerUnaryCall<HandleRequest, KindResponse>, callback: grpc_1.sendUnaryData<KindResponse>): void;
        abstract GetSubnodeCount(call: grpc_1.ServerUnaryCall<HandleRequest, CountResponse>, callback: grpc_1.sendUnaryData<CountResponse>): void;
        abstract GetSubnode(call: grpc_1.ServerUnaryCall<SubnodeRequest, HandleResponse>, callback: grpc_1.sendUnaryData<HandleResponse>): void;
        abstract GetText(call: grpc_1.ServerUnaryCall<HandleRequest, TextResponse>, callback: grpc_1.sendUnaryData<TextResponse>): void;
        abstract GetSubtreeLevel(call: grpc_1.ServerUnaryCall<HandleRequest, LevelResponse>, callback: grpc_1.sendUnaryData<LevelResponse>): void;
        abstract GetRoot(call: grpc_1.ServerUnaryCall<Empty, HandleResponse>, callback: grpc_1.sendUnaryData<HandleResponse>): void;
    }
    export class OrgServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOrgServiceService.definition, "OrgService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetKind: GrpcUnaryServiceInterface<HandleRequest, KindResponse> = (message: HandleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<KindResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<KindResponse>, callback?: grpc_1.requestCallback<KindResponse>): grpc_1.ClientUnaryCall => {
            return super.GetKind(message, metadata, options, callback);
        };
        GetSubnodeCount: GrpcUnaryServiceInterface<HandleRequest, CountResponse> = (message: HandleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CountResponse>, callback?: grpc_1.requestCallback<CountResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSubnodeCount(message, metadata, options, callback);
        };
        GetSubnode: GrpcUnaryServiceInterface<SubnodeRequest, HandleResponse> = (message: SubnodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HandleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HandleResponse>, callback?: grpc_1.requestCallback<HandleResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSubnode(message, metadata, options, callback);
        };
        GetText: GrpcUnaryServiceInterface<HandleRequest, TextResponse> = (message: HandleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TextResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TextResponse>, callback?: grpc_1.requestCallback<TextResponse>): grpc_1.ClientUnaryCall => {
            return super.GetText(message, metadata, options, callback);
        };
        GetSubtreeLevel: GrpcUnaryServiceInterface<HandleRequest, LevelResponse> = (message: HandleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LevelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LevelResponse>, callback?: grpc_1.requestCallback<LevelResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSubtreeLevel(message, metadata, options, callback);
        };
        GetRoot: GrpcUnaryServiceInterface<Empty, HandleResponse> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HandleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HandleResponse>, callback?: grpc_1.requestCallback<HandleResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRoot(message, metadata, options, callback);
        };
    }
}
