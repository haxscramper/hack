#+setupfile: ~/.config/hax-config/emacs/latex-export-header.org
#+author: Артемов Максим ИВБО-02-18
#+title: Отчет по работам 1-4 по дисциплине "ОиХД"
#+email: maxiartem@gmail.com

#+OPTIONS: toc:nil
\begin{abstract}
Предметная область - разработка ПО
\end{abstract}
#+TOC: headlines 3


* Нотация ~IDEF0~


#+caption: Первый уровень ~IDEF0~ диаграммы
#+attr_latex: :float nil
[[file:idef-level-1.tmp.png]]

#+caption: Второй уровень ~IDEF0~ диаграммы
#+attr_latex: :float nil
[[file:idef-level-1.tmp.png]]

На диаграмме показаны основные этапы обработки исходного кода входной
программы.

* Нотация ~DFD~

#+caption: ~DFD~ диаграмма
#+attr_latex: :float nil
[[file:dfd-level.tmp.png]]

На диаграмме показаны основные потоки данных в ходре обработки кода
входной программы.

* Нотация ~IDEF3~

#+caption: ~IDEF3~ диаграмма
#+attr_latex: :float nil
[[file:idef3.tmp.png]]

На диаграмме показаны основные этапы обработки кода исходной
программы.

* ~SQL~

Была разработана программа для анализа исходного кода других программ.
Программа представляет собой интерактивный интерпретатор команд,
способный производит считывание, распознавание (~A1~ на ~IDEF0~
диаграмме) и анализ (~A2~ на ~IDEF0~ диаграмме) исходного кода и
построение базы данных, хранящей информацию полученное при анализе.

** Структура базы данных

База данных состоит из двух таблиц: ~procs~, в которой хранятся имена
функций, тип возвращаемого значения, тип процедуры (макрос, шаблон,
процедура, функция или итератор) и ~arguments~ в которой перечислены
все аргументы всех функций (имя аргумента, его тип, индекс в
определении функции и значение по умолчанию). Таблицы связаны через
поле ~procid~ - уникальных индекс каждой процедуры.

Таблицы создаются при помощи следующих команд

#+caption: Создание таблицы ~procs~
#+begin_src sql
  CREATE TABLE procs (
      procid INT PRIMARY KEY,
      procname TEXT,
      moduleid INT,
      docstring TEXT,
      rettype TEXT,
      kind TEXT
  )
#+end_src


#+caption: Создание таблицы ~arguments~
#+begin_src sql
  CREATE TABLE arguments (
      procid INT REFERENCES procs(procid),
      arg TEXT,
      type TEXT,
      idx INTEGER,
      defval TEXT
  )
#+end_src



** Описание команд интерпретатора

Интерпретатор распознает следующие команды:

- ~loadf~ :: производит загрузку файла с исходным кодом, его обработку
  и добавление в базу данных. Данная команда реализует блоки ~A1~,
  ~A2~ и ~A3~ на ~IDEF0~ диаграмме.
- ~uses~ :: Выводит список функций которые принимают объект данного
  типа в качестве одного из аргументов. Позволяет получить информацию
  о том как можно "использовать" объекты данного типа.
- ~get~ :: Выводит список функций которые возвращают объект
  данного типа. Предназначена для нахождения способов "получить"
  объект определенного типа.
- ~signature~ :: Позволяет производить поиск функции с определенной
  сигнатурой в базе данных.

Все команды генерируют запрос к текущей базе объектов, и выводит
результат в человекочитаемом формате.

** Пример файла для обработки

Файл использованный в качестве тестового для примеров:

#+include: "example.nim" src nim

Таблица ~procs~ базы данный после обработки исходного файла
#+begin_src sqlite :db /tmp/db-1.sqlite :results output verbatim :exports output
.mode column
.headers on
.nullvalue NULL
SELECT * FROM procs;
#+end_src

#+RESULTS:
: procid      procname    moduleid    docstring   rettype     kind
: ----------  ----------  ----------  ----------  ----------  ----------
: 1           helloWorld  NULL                    cfloat      pkProc
: 2           getSign     NULL                    int         pkProc
: 3           name        NULL                    string      pkProc
: 4           secondName  NULL                    string      pkProc

Таблица ~arguments~ базы данный после обработки исходного файла
#+begin_src sqlite :db /tmp/db-1.sqlite :results output verbatim :exports output
.mode column
.headers on
.nullvalue NULL
SELECT * FROM arguments;
#+end_src


#+RESULTS:
: procid      arg         type        idx         defval
: ----------  ----------  ----------  ----------  ----------
: 1           arg         cfloat      0           NULL
: 2           a1          string      0           NULL
: 2           a2          string      1           NULL
: 2           a3          int         2           NULL
: 3           o           Object      0           NULL
: 4           o           Object      0           NULL


** Комманда ~signature~

*** Описание синтаксиса

Команда ~signature~ принимает в качестве аргумента строку в
следующего вида[fn::синтаксис указания сигнатуры функций частично
позаимствован ~Haskell~ и математики (в математике функция меджу
множествами описывается как \(F \colon S_1 \times S_2 \mapsto O\))]:
~<glob> :: [<types>] -> <return>~, где
- ~<glob>~ :: ~SQL~ glob паттерн для имени функции. Предназначен для
  указания шаблона имени функции. Например, в том случае если нужно
  найти функцию, чье имя начинается с ~get~ то необходимое значение
  параметра ~<glob>~ - ~get*~
- ~[<types>]~ :: список типов - аргументов функций. Аргументы
  разделены строкой ~" X "~. При обработке данной команды разделение
  аргументов на списко происдит именно по этой строке так что наличие
  пробелов явлется обязательным условием. Пример: ~int X string~ -
  позволяет пользователю найти функцию которая принимает ~int~ и
  ~string~ в качестве аргумента.
- ~<return>~ :: тип возвращяемого значения.

NOTE: ~::~ и ~->~ являются обязательным частями синтаксиса команды.

*** Пример использование команды

Допустим пользователю требуется найти функцию, которая позволяет
получить строку (~string~) из объекта типа ~Object~. В таком случае
пользователь должен ввести команду ~signature name :: Object ->
string~. Возможный результаты обработки:


#+caption: Результат обработки ~signature name :: Object -> string~
#+begin_src text
======================================= found =======================================

    name(o: Object): string

======================================== end ========================================
#+end_src

*** Описание реализации команды

При обработке данной команды составялется запрос следующего вида:

Для каждого типа в аргументе функции составялется подзапрос:

#+begin_src sql
SELECT procid FROM arguments WHERE type = '{arg}'
GROUP BY procid, type HAVING COUNT(type) = {cnt}
#+end_src

Где в ~{arg}~ подставляется тип аргумента а в ~{cnt}~ количество
аргументов одного типа.

После чего данные подзапросы объединяются при помощи ~UNION~ и
генерируется конечный запрос:

#+begin_src sql
  SELECT procname, procid, rettype FROM procs
  WHERE procid IN (
        {unionQuery}
  )
  AND procname GLOB '{name}'
  AND rettype = '{ret}';
#+end_src

Где ~{unionQuery}~ - результат объединения подкоманд для аргументов,
~{name}~ паттерн для имени функции, ~{ret}~ - тип возвращемого
значения.

#+caption: Пример сгенерированного запроса
#+begin_src sql
  SELECT procname, procid, rettype FROM procs
  WHERE procid IN (
      SELECT procid FROM arguments WHERE type = 'int'
      GROUP BY procid, type HAVING COUNT(type) = 1
    UNION
      SELECT procid FROM arguments WHERE type = 'string'
      GROUP BY procid, type HAVING COUNT(type) = 2
  )
  AND procname GLOB 'get*'
  AND rettype = 'int';
#+end_src

Данный запрос были сгенерирован в результате выполнения команды
~signature get* :: string X string X int -> int~


** Комманда ~uses~

*** Описание синтаксиса

~uses~ принимает на вход единственный аргумент: имя типа для которого
требуется получить возможные "применения".

~uses <тип аргумента>~

*** Пример использование команды

#+caption: Результат обработки ~uses cfloat~
#+begin_src text
--> Searching for uses of type cfloat

======================================= found =======================================

    helloWorld(arg: cfloat): cfloat

======================================== end ========================================
#+end_src

*** Описание реализации команды

При обработке команды генерируется запрос следующего вида:

#+begin_src sql
  SELECT procname, procid, rettype FROM procs
  WHERE procid IN (
    SELECT DISTINCT procid FROM arguments
    WHERE type = '{ntype}'
  );
#+end_src

Где ~{ntype}~ - тип, для которого требуется найти "применения".

** Комманда ~get~

*** Описание синтаксиса

Также как и ~uses~, ~get~ принимает на вход единственный аргумент:
имя типа для которого требуется получить возможные методы "получения".

~get <тип аргумента>~

*** Пример использование команды

#+caption: Результат обработки ~get cfloat~
#+begin_src text
--> Searching for sources of type cfloat

======================================= found =======================================

    helloWorld(arg: cfloat): cfloat

======================================== end ========================================
#+end_src

*** Описание реализации команды

При обработке команды генерируется запрос следующего вида:

#+begin_src sql
  SELECT procname, procid, rettype FROM procs
  WHERE rettype = '{ntype}';
#+end_src

Где ~{ntype}~ - тип, для которого требуется найти способы "получения".

** Комманда ~loadf~

*** Описание синтаксиса команды

Команда ~loadf~ производит анализ файла и добавление его к текущей
базе данных. В качестве аргумента данная команда принимает путь к
файлу. ~loadf example.nim~

*** Пример использования команды

#+caption: Результат обработки команды ~loadf example.nim~
#+begin_src text
--> Loading file into database
--> found 4 proc definitions in 'example.nim'
  - helloWorld
  - getSign
  - name
  - secondName
#+end_src

При обработке данной команды выводится количество найденных процедур
(в данном случае оно равно четырем) и их имена.

*** Описание реализации программы

Данная команда реализует шаги ~A1~ - ~A3~ из диаграммы ~IDEF0~. При
обработке данной команды вызываются функции ~addProcs~ (реализует шаг
~A3~ из диаграммы). ~registerAST~ реализует блоки ~A1~, ~A2~.

Обработчик синтаксического дерева (~A1~) позволяет вызвать процедуру
на каждый из элементов объявленных на верхнем уровне ("пройтись" по
всем объявлениям - процедура ~registerTopLevel~). При проходе по всем
объявлениям на верхнем уровне они добавляются во временный список
процедур (блок ~A2~ на диаграмме ~IDEF0~). После прохода по всем
объявлениям в файле они добавляются в базу данных (~A3~ из ~IDEF0~).

#+caption: Добавление аргументов в таблицу
#+begin_src sql
  INSERT INTO arguments
  (procid, arg, type, idx, defval)
  VALUES
  ("{pr.id}", "{arg.name}", "{arg.vtype}", "{idx}", {defval})
#+end_src

Где ~pr~ это объект, созданный во время работы обработки исходного
кода, ~"{pr.di}"~ - идентификатор процедуры, ~"{arg.name}"~ имя
аргумента, ~"{arg.vtype}"~, ~"{idx}"~ индекс аргумента, ~{defval}~ -
значение по умолчанию.

#+caption: Добавление процедур в таблицу
#+begin_src sql
  INSERT INTO procs
  (procid, procname, docstring, rettype, kind)
  VALUES
  ("{pr.id}", "{pr.name}", {docstr.dbQuote()}, '{pr.rett}', '{pr.kind}')
#+end_src

~"{pr.name}"~ - имя процедуры, ~"{pr.id}"~ - уникальный идентификатор
процедуры, ~'{pr.rett}'~ - тип возвращаемого значения.



* Приложения 1: пример работы комманд

Пример работы программы при выполнении комманд:

#+include: test.txt src text

[[file:example.tmp.png]]

* Приложение 2: исходный код программы

#+include: parseast.nim src nim

#+begin_export latex
\listoffigures
#+end_export
