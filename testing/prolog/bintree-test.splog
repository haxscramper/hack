:- initialization(main).

build_tree([Head], t(Head, nil, nil)).

build_tree([Head, LeftList], t(Head, Left, nil)) :-
    build_tree([LeftList], Left).

build_tree([Head, LeftList, RightList], t(Head, Left, Right)) :-
    build_tree(LeftList, Left),
    build_tree(RightList, Right),
    nl.

repeat_string(String, 0, String).
repeat_string(String, NumRepeat, OutStr) :-
    NewRepeat is NumRepeat - 1,
    repeat_string(String, NewRepeat, TailStr),
    string_concat(String, TailStr, OutStr).

build_tree(Item, t(Item, nil, nil)).

print_bintree(t(Head, Left, Right), Indent) :-
    NewIndent is Indent + 1,
    repeat_string("  ", NewIndent, Spacing),
    format("~a`~d~n", [Spacing, Head]),
    (Left = nil ; print_bintree(Left, NewIndent)),
    (Right = nil ; print_bintree(Right, NewIndent))
.

test :-
    trace(build_tree),
    build_tree([1, [2, [2, 2], 9], [2, 3]], TreeOut),
    print_bintree(TreeOut, 0)
.


main :- test, halt.
