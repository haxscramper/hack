:- initialization(main).

%% TODO

print_row([]).
print_row([Head|Tail]) :-
    write(Head), write(" "),
    print_row(Tail).

print_matrix([]).
print_matrix([FirstRow|Others]) :-
    write("[ "), print_row(FirstRow), writeln("]"),
    print_matrix(Others).

first_col([], [], []).
first_col(
    [
        [ Cell
          | RowTail %% Хвост результирующей строки
        ] | OtherRows %% Хвост матрицы будет использован для получения
                      %% остальных частей результирующей строки.
    ], [
        Cell %% Первый столбец первой строки равен первому элементу
             %% первой колонки и первому элементу результирующей
             %% строки
        | ResRowTail %% Хвост результирующей строки равен первой
                     %% колонке хвоста входной матрицы.
    ] , [
        RowTail
        | XXXVarName
    ] ) :-
    first_col(
        OtherRows,
        ResRowTail,
        XXXVarName
    ).


transpose([[]|_], []).
transpose(InMatrix, [FirstRow|TailRows]) :-
    first_col( %% Находим первую колонку в матрице.
        InMatrix,
        FirstRow, %% Так как `FirstRow` было использовано как голова
        %% результирующей матрицы то первая колонка входной
        %% матрицы будет приравнена к первой строке выходной
        %% матрицы

        RestMatrix %% Оставшиеся колонки будут рекурсивно добавлены в
        %% хвост результирующей матрицы.
    ),
    transpose(RestMatrix, TailRows).



bin_and(A, B, Res) :- (A = 1, B = 1, Res = 1) ; Res = 0.
any_of(Val, [Head|Tail]) :- Head = Val ; any_of(Val, Tail).

mult_list([Head1|_], [Head2|_], Out) :-
    ( Head1 = Head2, Out = 1 );
    ( Head1 = Head2, Out = 0 ).

mult_list([Head1|Tail1], [Head2|Tail2], Out) :-
    Head1 = Head2, Head1 = 1,
    mult_list(Tail1, Tail2, Out).

mult_vec_matrixT(Vector, [Row|OtherRows], [HeadOut|TailOut]) :-
    mult_list(Vector, Row, HeadOut),
    mult_vec_matrixT(Vector, OtherRows, TailOut).

mult_matrix_matrixT(
    [MHead  | MTail  ],
    MatrTransp,
    [RHead  | RTail  ]
) :-
    mult_vec_matrixT(MHead, MatrTransp),
    mult_matrix_matrixT(MTail, MatrTransp, RTail).



matrix_square(Matrix, Res) :-
    transpose(Matrix, Transposed),
    mult_vec_matrixT(Matrix, Transposed, Res).

main :-
    %% <++>
    A = [[1, 0], [1, 0]],
    transpose(A, R),
    print_matrix(A),
    nl,
    print_matrix(R),
    trace(matrix_square),
    trace(mult_matrix_matrixT),
    trace(mult_vec_matrixT),
    matrix_square([ [1,0], [0, 0] ], Res),
    writeln(Res),
    halt.
