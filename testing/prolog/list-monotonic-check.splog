:- initialization(main).


strictly_increasing([Head, Last]) :- Head < Last.
strictly_increasing([Head1, Head2|Tail]) :-
    Head1 < Head2,
    strictly_increasing([Head2|Tail]).


strictly_decreasing([Head, Last]) :- Head > Last.
strictly_decreasing([Head1, Head2|Tail]) :-
    Head1 > Head2,
    strictly_decreasing([Head2|Tail]).

non_increasing([]).
non_increasing([_]).
non_increasing([Head, Last]) :- Head =< Last.
non_increasing([Head1, Head2|Tail]) :-
    Head1 =< Head2,
    non_increasing([Head2|Tail]).

non_decreasing([]).
non_decreasing([_]).
non_decreasing([Head, Last]) :- Head >= Last.
non_decreasing([Head1, Head2|Tail]) :-
    Head1 >= Head2,
    non_decreasing([Head2|Tail]).


check_list(List) :-
    write("---> "),
    (
        ( strictly_increasing(List), writeln("Строго возрастает")) ;
        ( strictly_decreasing(List), writeln("Строго убывает")) ;
        (
            non_increasing(List),
            non_decreasing(List),
            writeln("Не возрастает и не убывает")
        ) ;
        ( non_increasing(List), writeln("Невозрастающий")) ;
        ( non_decreasing(List), writeln("Неубывающий")) ;
        ( writeln("Нельзя определить") )
    ), nl.

test :-
    check_list([1, 2, 3]),
    check_list([1, -1, -2]),
    check_list([0, 0, 0]),
    check_list([0, 0, 1]).


run_main :-
    writeln("Введите список"), readlist(List),
    check_list(List),
    interactive.

main :-
    ensure_loaded("common.splog"),
    writeln("61 [6] Указать характер упорядоченности списка"),
    startup_notice,
    ( non_interactive_test ; run_interactively ).
