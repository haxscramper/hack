:- initialization(main).

%% TODO

%% Вывести одну строку матрицы
print_row([]).
print_row([Head|Tail]) :-
    write(Head), write(" "),
    print_row(Tail).

%% Вывести матрицу
print_matrix([]).
print_matrix([FirstRow|Others]) :-
    write("[ "), print_row(FirstRow), writeln("]"),
    print_matrix(Others).

%% Получить первую колонку матрицы
first_col([], [], []).
first_col(
    [
        [ Cell
          | RowTail %% Хвост результирующей строки
        ] | OtherRows %% Хвост матрицы будет использован для получения
                      %% остальных частей результирующей строки.
    ], [
        Cell %% Первый столбец первой строки равен первому элементу
             %% первой колонки и первому элементу результирующей
             %% строки
        | ResRowTail %% Хвост результирующей строки равен первой
                     %% колонке хвоста входной матрицы.
    ] , [
        RowTail
        | XXXVarName
    ] ) :-
    first_col(
        OtherRows,
        ResRowTail,
        XXXVarName
    ).

%% Транспонировать матрицу
transpose([[]|_], []).
transpose([],[]).
transpose(InMatrix, [FirstRow|TailRows]) :-
    first_col( %% Находим первую колонку в матрице.
        InMatrix,
        FirstRow, %% Так как `FirstRow` было использовано как голова
        %% результирующей матрицы то первая колонка входной
        %% матрицы будет приравнена к первой строке выходной
        %% матрицы

        RestMatrix %% Оставшиеся колонки будут рекурсивно добавлены в
        %% хвост результирующей матрицы.
    ),
    transpose(RestMatrix, TailRows).


%% Произвести логическое сложение
logic_mult(1, 1, 1).
logic_mult(_, _, 0).
%% Произвести логическое умножение
logic_add(0, 0, 0).
logic_add(_, _, 1).

%% Вычислить логическое произведение векторов (скалярное произведение
%% в покоординатной форме используя логические сложение и умножение)
cross_mult_list([Head1], [Head2], Out) :-
    logic_mult(Head1, Head2, Out).

cross_mult_list([Head1|Tail1], [Head2|Tail2], Out) :-
    cross_mult_list(Tail1, Tail2, TailProd),
    logic_mult(Head1, Head2, HeadProd),
    logic_add(TailProd, HeadProd, Out)
.

%% Умножить вектор на матрицу
cross_mult_vec_matrixT(Vector, [LastRow], [Out]) :-
    cross_mult_list(Vector, LastRow, Out).

cross_mult_vec_matrixT(Vector, [Row|OtherRows], [HeadOut|TailOut]) :-
    cross_mult_list(Vector, Row, HeadOut),
    cross_mult_vec_matrixT(Vector, OtherRows, TailOut)
.

%% Умножить матрицу на транспонированную матрицу
mult_matrix_matrixT(
    [LastTail],
    MatrTransp,
    [OutTail]) :-
    cross_mult_vec_matrixT(LastTail, MatrTransp, OutTail).

mult_matrix_matrixT(
    [MHead  | MTail  ],
    MatrTransp,
    [RHead  | RTail  ]
) :-
    mult_matrix_matrixT(MTail, MatrTransp, RTail),
    cross_mult_vec_matrixT(MHead, MatrTransp, RHead),

    true.


%% Вычислиьт квадрат матрицы
matrix_square(Matrix, Res) :-
    transpose(Matrix, Transposed),
    mult_matrix_matrixT(Matrix, Transposed, Res)
.

test_mult_matrix_matrixT(M1, M2) :-
    writeln("matrix-matrix test"),
    writeln("in:"),
    print_matrix(M1),
    writeln("---"),
    print_matrix(M2),
    writeln("out:"),
    %% trace(cross_mult_vec_matrixT),
    %% trace(mult_matrix_matrixT),
    mult_matrix_matrixT(M1, M2, Out),
    %% writeln(Out),
    print_matrix(Out),
true.

test_vec_mult_matrix(Vec, Matrix) :-
    writeln("vector-matrix test"),
    write("in: "), writeln(Vec),
    print_matrix(Matrix),
    cross_mult_vec_matrixT(Vec, Matrix, Out),
    writeln("out:"),
    writeln(Out),
true.

test_matrix_transpose(M) :-
    writeln("transpose test"),
    writeln("in:"),
    print_matrix(M),
    transpose(M, T),
    writeln("out:"),
    print_matrix(T),
true.

test_cross_mult_list(List1, List2) :-
    writeln("list-list test"),
    write(List1),
    write(" ∙ "),
    write(List2),
    write(" = "),
    cross_mult_list(List1, List2, Out),
    writeln(Out)
.

test_matrix_square(Matr) :-
    writeln("matrix square test"),
    writeln("in:"),
    print_matrix(Matr),
    %% trace(matrix_square),
    %% trace(transpose),
    matrix_square(Matr, Out), !,
    writeln("out:"),
    print_matrix(Out),
true.

%% Проверка на равенство строк по длинне
equal_rows([], _).
equal_rows([Row], PrevLen) :- length(Row, PrevLen).
equal_rows([Row|Tail], PrevLen) :-
    ( var(PrevLen) ; length(Row, PrevLen) ),
    length(Row, PrevLen),
    equal_rows(Tail, PrevLen).

%% Проверка на квадратность (количество строк должно быть равно
%% количеству столбцов)
is_square([Row|Tail], Len) :-
    length([Row|Tail], Len),
    length(Row, Len).

to_boollist([], []).
to_boollist([Head|Tail], [HeadOut|TailOut]) :-
    ( ( Head = 0, HeadOut = 0 ) ; HeadOut = 1 ),
    to_boollist(Tail, TailOut).


to_boolean([], []).
to_boolean([Row|Tail], [RowOut|TailOut]) :-
        to_boollist(Row, RowOut),
        to_boolean(Tail, TailOut).

%% Считать квадратную матрицу, провести проверки и вывести сообщения
%% об ошибках (если требуется)
read_square_matrix(Out) :-
    read(InList),
    ( equal_rows(InList, _) ;
      writeln_err("Все строки должны иметь одинаковую длинну") , fail ), !,
    ( is_square(InList, _) ;
      writeln_err("Требуется ввести квадратную! матрицу"), fail ),
    to_boolean(InList, Out),
true.

%% Запуск интерактивной части
run_main :-
    writeln(
"Введите квадратную булеву матрицу как вложенный список
(например: [[1,1], [1,1]]) Элементами матрицы должны быть
числа, любое ненулевое число будет интерпретрованно как 1"),
    read_square_matrix(InMatr),
    writeln("Вы ввели:"),
    print_matrix(InMatr),
    matrix_square(InMatr, Square),
    writeln("Результат:"),
    print_matrix(Square),
    interactive.

test :-
    test_matrix_transpose([[1]]), !,
    test_matrix_transpose([[0,0], [1,1]]), !,
    %% test_mult_matrix_matrixT([[0,0], [0,0]], [[0,0], [0,0]]),
    %% test_mult_matrix_matrixT([[1,1], [1,1]], [[1,1], [1,1]]),
    test_matrix_square([[1,1], [0,0]]), !,
    test_matrix_square([[1,1,1], [0,0,0], [1,1,1]]), !,
    test_matrix_square([[1,1,0,0], [1,1,0,0], [1,0,1,1], [0,0,0,1]]), !,
halt,
true.


main :-
    ensure_loaded("../common.splog"),
    writeln_inf("78 [8] булев квадрат матрицы"),
    startup_notice,
    ( non_interactive_test ; interactive ).
