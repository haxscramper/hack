import macros

# Test intraction between macros (auto-generated types), conditional
# compilation (`when` in object defintion) and documentation generator

type
  UserType*[T] = object
    f0*: seq[int] ## SDF

    # Comments on these fields will not be visible in documentation.
    when T is int:
      f1*: char ## Field
    elif T is float:
      f1*: float ## FLoat
      f2*: string ## WE
    else:
      fTmp*: int

block:
  let t = UserType[int]()
  echo t

block:
  let t = UserType[float]()
  echo t


macro genType*(): untyped =
  # Documentation for fields and object as a whole is visible. NOTE:
  # `AutoGenerated1` will be generated as gensym - use `{.inject.}` to
  # actually use the type
  result = quote do:
    type
      AutoGenerated1* = object
        ## Documentation for generated type
        f1*: int ## Documentation for specific field

  # echo result.astGenRepr()

genType()

# dumpAstGen:
#   type
#     AutoGenerated1* = object
#       ## Documentation for generated type
#       f1*: int ## Documentation for specific field

macro astGenType*(): untyped =
  result = nnkStmtList.newTree(
    nnkTypeSection.newTree(
        nnkTypeDef.newTree(
          nnkPostfix.newTree(
            newIdentNode("*"),
            newIdentNode("AutoGenerated1")
          ),
          newEmptyNode(),
          nnkObjectTy.newTree(
            newEmptyNode(),
            newEmptyNode(),
            nnkRecList.newTree(
              # parseStmt("f1*: int ## Documentation")
              nnkIdentDefs.newTree(
                nnkPostfix.newTree(
                  newIdentNode("*"),
                  newIdentNode("f1")
                ),
                newIdentNode("int"),
                newEmptyNode()
              )
            )
          )
        )
      )
    )

astGenType()

# dumpAstGen:
#   proc a*(): void =
#     ## Documentation
#     discard


macro genProc*(): untyped =
  nnkStmtList.newTree(
    nnkProcDef.newTree(
      nnkPostfix.newTree(
        newIdentNode("*"),
        newIdentNode("a")
      ),
      newEmptyNode(),
      newEmptyNode(),
      nnkFormalParams.newTree(
        newIdentNode("void")    ),
      newEmptyNode(),
      newEmptyNode(),
      nnkStmtList.newTree(
        newCommentStmtNode("Documentation for procedure"),
        nnkDiscardStmt.newTree(
          newEmptyNode()
        )
      )
    )
  )

genProc()

var f1: int ## HEllo

static:
  echo parseStmt("var f1: int ## Hello").treeRepr()



#================  when object, differently named fields  ================#

type
  U[T] = object
    when T is NimNode:
      f1: T # Do not explicitly put `NimNode` here. If you do that,
            # object will become compile-time only.
    else:
      f2: T
      f3: int

echo U[int]()
echo U[void]()
