TomlConfPackage
===============

This is a wrapper around conan package management system.

This wrapper allows you to write package definitions for conan build
as declarative toml files - instead of python code that can be parsed
only using python interpreter. `conan_toml.py` defined new base class
for package configurations - to use it in your package you will need
to import `conan_toml.py` and then write this in your `conanfile.py`:

.. code-block:: python
    class ConanTomlExample(common.TomlConfPackage):
        pass

All necessary configuration will be taken from `conffile.toml` (by
default). Or, if you want to customise file name you can declare
`conffile` attribute of the derived class and set it to the desired
file name.

Reading of the configuration file happends in the `__init__` of
`TomlConfPackage` - in case you want to customize some of the
variables afterwards.

TODO:

- [ ] Wrap `conan_toml.py` into conan package to use with
  `python_requires`.

WARNING:

- Right now `name` in the package configuration is used in multiple
  places such as name of the .pro file for qmake-based libraries. It
  will be changed in the future, but for now it is a bit of a hack.
  Make sure that name of the .pro file, target library, package name
  etc. match each other.
- `conffile.toml` will now be dragged around with package source code.

package-orchestrate
===================

Command-line utility for creating and maintaining packages in
different languages. Right now it only supports qmake static libraries
using conan package manager - i started with this one. Sometimes later
I might add more functions to it. Right now this i only
proof-of-concept with stack of hastly hacks quickly thrown together
(I'm really surprised it works at all). Right now you can create,
build and publish conan package (package will use conan-toml
configuration wrapper).

To create new package run `package-orchestrate create` and provide all
necessary options such as `--name`, `--version`, `--lang` etc. (right
now you basically have to specify all options from the `--help` except
`--password` and maybe `--no-example`) to create package.

To build newly created package run `package-orchestrate build`

To upload package to server run `package-orchestrate publish
--password:<password>`. Example package will work with `conan_server`
running locally - by default is has `--password:demo`

NOTE:

- fuzzy widget library I'm wrapping in the example is located in
  `haxscamper-misc/cpp/fuzzy_select`
- `package-orchestrate` is a symlink to the
  `package_orchestrate.nim.bin` (I'm using `nr` from
  `settings-public/config.fish` to automatically build binary)
- Due to conan's packaging logic (hard/impossible to get other files
  rather than `conanfile.py` to be exported on the package's toplevel)
  I had to embed configuration file directly into the exported
  configuration. This means `conanfile.py` generated by
  `package-orchestate` is **not** intended to be manually modifier -
  it is updated on each package publishing - I had to basically
  copy-paste configuration as literal string in it. Example:
  .. code-block:: python
      common = __import__("conan_toml")
      class ConanToml(common.TomlConfPackage):
          config_copy = """[meta]
      language = "c++"

      [pkgconfig]
      name = "fuzzywidget"
      version = "0.1"
      user = "author"
      channel = "testing"
      package_type = "library"

      [buildconfig]
      package_manager = "conan"
      conan_build_folder = "build"
      conan_reqs_folder = "conan"
      build_system = "qmake"
      copy_to_build = [ "*.hpp", "*.cpp", "*.pro" ]
      libtype = "static"

      [exportconfig]
      library_globs = [ "*.a" ]
      header_folder = "include/fuzzywidget"
      header_globs = [ "*.hpp" ]
          """ 

How to use aka 'creating c++ packages in three commands'
========================================================

To create package

- `package-orchestrate create --lang:cpp ...` - fill in the rest of
  options
- `package-orchestrate build` - compile packages
- `package-orchestrate publis --password:demo` upload package to
  remote specified in `conffile.toml`

To use pacage create `conanfile.txt`

.. code-block:: toml
    [requires]
    name/version

    [generators]
    qmake

To download package run:

.. code-block:: bash
    mkdir conan
    cd conan
    conan install .. -r=local

To add package to qt project add

.. code-block:: pro
    CONFIG += conan_basic_setup
    include(conan/conanbuildinfo.pri)

DONE - you've succesfully created c++ package, uploaded it into remote
and added it to different project

Concrete example
================

.. code-block:: bash
    # In package directory
    package-orchestrate --lang:cpp --type:staticlib \
      --name:libtest-n12 --buildsystem:qmake --version:0.1 create
    package-orchestrate build
    package-orchestrate publish --password:demo
    # In project directory
    mkdir conan
    cd conan
    conan install .. -r=local


.. code-block:: pro
    CONFIG += conan_basic_setup
    include(conan/conanbuildinfo.pri)

.. code-block:: cpp
   // Include
   #include <libtest-n12/header.hpp>
   // ...
   // Using function
   printNumber(12);

DONE
