
* SQL queries

Select every instance of the file, find it's relative complexity and order by it.

#+begin_src sql
select strings.`text`, file.total_complexity / cast(file.line_count as real) as result
from file, strings
where file.name == strings.id
order by result;
#+end_src

* The database structure

Database is comprised of the several tables, mapping different types
declared in the ~git_ir.hpp~ file. Mapping is done via ORM in a
straightforward manner. General overview of each table present in the
database:

- line :: Interned information about different lines in the code. Each
  line's content is represented uniquely and includes the ~.author~,
  ~.time~ and ~.content~ ID fields. ~.nesting~ is a line complexity
  analytics.
- files :: full list of all processed files - each separate version of the
  file is represented as a different database entry, with new ID,
  statistics etc.
- changed_ranges :: auxiliary table for storing ranges of the source code
  changes
- file lines :: auxiliary table for data found in the analyzed files.
  ~.file~ refers to the ~files~ table, ~index~ shows the position in the
  file and the ~.line~ refers to the information in the ~line~ table.
