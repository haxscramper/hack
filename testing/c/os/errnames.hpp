#include <string>
 std::string get_err_symbol(int sym) {
std::string symidx = std::to_string(sym);
switch (sym) {
case 1: return "EPERM (" + symidx + ")";
case 10: return "ECHILD (" + symidx + ")";
case 100: return "ENETDOWN (" + symidx + ")";
case 101: return "ENETUNREACH (" + symidx + ")";
case 102: return "ENETRESET (" + symidx + ")";
case 103: return "ECONNABORTED (" + symidx + ")";
case 104: return "ECONNRESET (" + symidx + ")";
case 105: return "ENOBUFS (" + symidx + ")";
case 106: return "EISCONN (" + symidx + ")";
case 107: return "ENOTCONN (" + symidx + ")";
case 108: return "ESHUTDOWN (" + symidx + ")";
case 109: return "ETOOMANYREFS (" + symidx + ")";
case 11: return "EAGAIN (" + symidx + ")";
case 110: return "ETIMEDOUT (" + symidx + ")";
case 111: return "ECONNREFUSED (" + symidx + ")";
case 112: return "EHOSTDOWN (" + symidx + ")";
case 113: return "EHOSTUNREACH (" + symidx + ")";
case 114: return "EALREADY (" + symidx + ")";
case 115: return "EINPROGRESS (" + symidx + ")";
case 116: return "ESTALE (" + symidx + ")";
case 117: return "EUCLEAN (" + symidx + ")";
case 118: return "ENOTNAM (" + symidx + ")";
case 119: return "ENAVAIL (" + symidx + ")";
case 12: return "ENOMEM (" + symidx + ")";
case 120: return "EISNAM (" + symidx + ")";
case 121: return "EREMOTEIO (" + symidx + ")";
case 122: return "EDQUOT (" + symidx + ")";
case 123: return "ENOMEDIUM (" + symidx + ")";
case 124: return "EMEDIUMTYPE (" + symidx + ")";
case 125: return "ECANCELED (" + symidx + ")";
case 126: return "ENOKEY (" + symidx + ")";
case 127: return "EKEYEXPIRED (" + symidx + ")";
case 128: return "EKEYREVOKED (" + symidx + ")";
case 129: return "EKEYREJECTED (" + symidx + ")";
case 13: return "EACCES (" + symidx + ")";
case 130: return "EOWNERDEAD (" + symidx + ")";
case 131: return "ENOTRECOVERABLE (" + symidx + ")";
case 132: return "ERFKILL (" + symidx + ")";
case 133: return "EHWPOISON (" + symidx + ")";
case 14: return "EFAULT (" + symidx + ")";
case 15: return "ENOTBLK (" + symidx + ")";
case 16: return "EBUSY (" + symidx + ")";
case 17: return "EEXIST (" + symidx + ")";
case 18: return "EXDEV (" + symidx + ")";
case 19: return "ENODEV (" + symidx + ")";
case 2: return "ENOENT (" + symidx + ")";
case 20: return "ENOTDIR (" + symidx + ")";
case 21: return "EISDIR (" + symidx + ")";
case 22: return "EINVAL (" + symidx + ")";
case 23: return "ENFILE (" + symidx + ")";
case 24: return "EMFILE (" + symidx + ")";
case 25: return "ENOTTY (" + symidx + ")";
case 26: return "ETXTBSY (" + symidx + ")";
case 27: return "EFBIG (" + symidx + ")";
case 28: return "ENOSPC (" + symidx + ")";
case 29: return "ESPIPE (" + symidx + ")";
case 3: return "ESRCH (" + symidx + ")";
case 30: return "EROFS (" + symidx + ")";
case 31: return "EMLINK (" + symidx + ")";
case 32: return "EPIPE (" + symidx + ")";
case 33: return "EDOM (" + symidx + ")";
case 34: return "ERANGE (" + symidx + ")";
case 35: return "EDEADLK (" + symidx + ")";
case 36: return "ENAMETOOLONG (" + symidx + ")";
case 37: return "ENOLCK (" + symidx + ")";
case 38: return "ENOSYS (" + symidx + ")";
case 39: return "ENOTEMPTY (" + symidx + ")";
case 4: return "EINTR (" + symidx + ")";
case 40: return "ELOOP (" + symidx + ")";
case 42: return "ENOMSG (" + symidx + ")";
case 43: return "EIDRM (" + symidx + ")";
case 44: return "ECHRNG (" + symidx + ")";
case 45: return "EL2NSYNC (" + symidx + ")";
case 46: return "EL3HLT (" + symidx + ")";
case 47: return "EL3RST (" + symidx + ")";
case 48: return "ELNRNG (" + symidx + ")";
case 49: return "EUNATCH (" + symidx + ")";
case 5: return "EIO (" + symidx + ")";
case 50: return "ENOCSI (" + symidx + ")";
case 51: return "EL2HLT (" + symidx + ")";
case 52: return "EBADE (" + symidx + ")";
case 53: return "EBADR (" + symidx + ")";
case 54: return "EXFULL (" + symidx + ")";
case 55: return "ENOANO (" + symidx + ")";
case 56: return "EBADRQC (" + symidx + ")";
case 57: return "EBADSLT (" + symidx + ")";
case 59: return "EBFONT (" + symidx + ")";
case 6: return "ENXIO (" + symidx + ")";
case 60: return "ENOSTR (" + symidx + ")";
case 61: return "ENODATA (" + symidx + ")";
case 62: return "ETIME (" + symidx + ")";
case 63: return "ENOSR (" + symidx + ")";
case 64: return "ENONET (" + symidx + ")";
case 65: return "ENOPKG (" + symidx + ")";
case 66: return "EREMOTE (" + symidx + ")";
case 67: return "ENOLINK (" + symidx + ")";
case 68: return "EADV (" + symidx + ")";
case 69: return "ESRMNT (" + symidx + ")";
case 7: return "E2BIG (" + symidx + ")";
case 70: return "ECOMM (" + symidx + ")";
case 71: return "EPROTO (" + symidx + ")";
case 72: return "EMULTIHOP (" + symidx + ")";
case 73: return "EDOTDOT (" + symidx + ")";
case 74: return "EBADMSG (" + symidx + ")";
case 75: return "EOVERFLOW (" + symidx + ")";
case 76: return "ENOTUNIQ (" + symidx + ")";
case 77: return "EBADFD (" + symidx + ")";
case 78: return "EREMCHG (" + symidx + ")";
case 79: return "ELIBACC (" + symidx + ")";
case 8: return "ENOEXEC (" + symidx + ")";
case 80: return "ELIBBAD (" + symidx + ")";
case 81: return "ELIBSCN (" + symidx + ")";
case 82: return "ELIBMAX (" + symidx + ")";
case 83: return "ELIBEXEC (" + symidx + ")";
case 84: return "EILSEQ (" + symidx + ")";
case 85: return "ERESTART (" + symidx + ")";
case 86: return "ESTRPIPE (" + symidx + ")";
case 87: return "EUSERS (" + symidx + ")";
case 88: return "ENOTSOCK (" + symidx + ")";
case 89: return "EDESTADDRREQ (" + symidx + ")";
case 9: return "EBADF (" + symidx + ")";
case 90: return "EMSGSIZE (" + symidx + ")";
case 91: return "EPROTOTYPE (" + symidx + ")";
case 92: return "ENOPROTOOPT (" + symidx + ")";
case 93: return "EPROTONOSUPPORT (" + symidx + ")";
case 94: return "ESOCKTNOSUPPORT (" + symidx + ")";
case 95: return "EOPNOTSUPP (" + symidx + ")";
case 96: return "EPFNOSUPPORT (" + symidx + ")";
case 97: return "EAFNOSUPPORT (" + symidx + ")";
case 98: return "EADDRINUSE (" + symidx + ")";
case 99: return "EADDRNOTAVAIL (" + symidx + ")";
default: return "???";
}
}
